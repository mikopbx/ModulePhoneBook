"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2024 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */
var ModulePhoneBookStatus = {
  $moduleStatus: $('#status'),
  $statusToggle: $('#module-status-toggle'),
  $formObj: $('#module-phonebook-form'),

  /**
   * Initializes the module's status checks.
   * Adds event listeners to update the status of the form based on the module's enabled/disabled state.
   */
  initialize: function initialize() {
    ModulePhoneBookStatus.checkStatusToggle();
    window.addEventListener('ModuleStatusChanged', ModulePhoneBookStatus.checkStatusToggle);
  },

  /**
   * Toggle the status of buttons and fields when the module status changes.
   * If the module is enabled, fields are activated; otherwise, they are disabled.
   */
  checkStatusToggle: function checkStatusToggle() {
    if (ModulePhoneBookStatus.$statusToggle.checkbox('is checked')) {
      ModulePhoneBookStatus.$formObj.show();
      ModulePhoneBookStatus.$moduleStatus.show();
    } else {
      ModulePhoneBookStatus.$formObj.hide();
      ModulePhoneBookStatus.$moduleStatus.hide();
    }
  }
}; // Initialize the module status handler when the document is ready.

$(document).ready(function () {
  ModulePhoneBookStatus.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGUtcGhvbmVib29rLXN0YXR1cy5qcyJdLCJuYW1lcyI6WyJNb2R1bGVQaG9uZUJvb2tTdGF0dXMiLCIkbW9kdWxlU3RhdHVzIiwiJCIsIiRzdGF0dXNUb2dnbGUiLCIkZm9ybU9iaiIsImluaXRpYWxpemUiLCJjaGVja1N0YXR1c1RvZ2dsZSIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJjaGVja2JveCIsInNob3ciLCJoaWRlIiwiZG9jdW1lbnQiLCJyZWFkeSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBTUEscUJBQXFCLEdBQUc7QUFDMUJDLEVBQUFBLGFBQWEsRUFBRUMsQ0FBQyxDQUFDLFNBQUQsQ0FEVTtBQUUxQkMsRUFBQUEsYUFBYSxFQUFFRCxDQUFDLENBQUMsdUJBQUQsQ0FGVTtBQUcxQkUsRUFBQUEsUUFBUSxFQUFFRixDQUFDLENBQUMsd0JBQUQsQ0FIZTs7QUFLMUI7QUFDSjtBQUNBO0FBQ0E7QUFDSUcsRUFBQUEsVUFUMEIsd0JBU2I7QUFDVEwsSUFBQUEscUJBQXFCLENBQUNNLGlCQUF0QjtBQUNBQyxJQUFBQSxNQUFNLENBQUNDLGdCQUFQLENBQXdCLHFCQUF4QixFQUErQ1IscUJBQXFCLENBQUNNLGlCQUFyRTtBQUNILEdBWnlCOztBQWMxQjtBQUNKO0FBQ0E7QUFDQTtBQUNJQSxFQUFBQSxpQkFsQjBCLCtCQWtCTjtBQUNoQixRQUFJTixxQkFBcUIsQ0FBQ0csYUFBdEIsQ0FBb0NNLFFBQXBDLENBQTZDLFlBQTdDLENBQUosRUFBZ0U7QUFDNURULE1BQUFBLHFCQUFxQixDQUFDSSxRQUF0QixDQUErQk0sSUFBL0I7QUFDQVYsTUFBQUEscUJBQXFCLENBQUNDLGFBQXRCLENBQW9DUyxJQUFwQztBQUNILEtBSEQsTUFHTztBQUNIVixNQUFBQSxxQkFBcUIsQ0FBQ0ksUUFBdEIsQ0FBK0JPLElBQS9CO0FBQ0FYLE1BQUFBLHFCQUFxQixDQUFDQyxhQUF0QixDQUFvQ1UsSUFBcEM7QUFDSDtBQUNKO0FBMUJ5QixDQUE5QixDLENBNkJBOztBQUNBVCxDQUFDLENBQUNVLFFBQUQsQ0FBRCxDQUFZQyxLQUFaLENBQWtCLFlBQU07QUFDcEJiLEVBQUFBLHFCQUFxQixDQUFDSyxVQUF0QjtBQUNILENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWlrb1BCWCAtIGZyZWUgcGhvbmUgc3lzdGVtIGZvciBzbWFsbCBidXNpbmVzc1xuICogQ29weXJpZ2h0IMKpIDIwMTctMjAyNCBBbGV4ZXkgUG9ydG5vdiBhbmQgTmlrb2xheSBCZWtldG92XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG5jb25zdCBNb2R1bGVQaG9uZUJvb2tTdGF0dXMgPSB7XG4gICAgJG1vZHVsZVN0YXR1czogJCgnI3N0YXR1cycpLFxuICAgICRzdGF0dXNUb2dnbGU6ICQoJyNtb2R1bGUtc3RhdHVzLXRvZ2dsZScpLFxuICAgICRmb3JtT2JqOiAkKCcjbW9kdWxlLXBob25lYm9vay1mb3JtJyksXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgbW9kdWxlJ3Mgc3RhdHVzIGNoZWNrcy5cbiAgICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB1cGRhdGUgdGhlIHN0YXR1cyBvZiB0aGUgZm9ybSBiYXNlZCBvbiB0aGUgbW9kdWxlJ3MgZW5hYmxlZC9kaXNhYmxlZCBzdGF0ZS5cbiAgICAgKi9cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICBNb2R1bGVQaG9uZUJvb2tTdGF0dXMuY2hlY2tTdGF0dXNUb2dnbGUoKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ01vZHVsZVN0YXR1c0NoYW5nZWQnLCBNb2R1bGVQaG9uZUJvb2tTdGF0dXMuY2hlY2tTdGF0dXNUb2dnbGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGUgdGhlIHN0YXR1cyBvZiBidXR0b25zIGFuZCBmaWVsZHMgd2hlbiB0aGUgbW9kdWxlIHN0YXR1cyBjaGFuZ2VzLlxuICAgICAqIElmIHRoZSBtb2R1bGUgaXMgZW5hYmxlZCwgZmllbGRzIGFyZSBhY3RpdmF0ZWQ7IG90aGVyd2lzZSwgdGhleSBhcmUgZGlzYWJsZWQuXG4gICAgICovXG4gICAgY2hlY2tTdGF0dXNUb2dnbGUoKSB7XG4gICAgICAgIGlmIChNb2R1bGVQaG9uZUJvb2tTdGF0dXMuJHN0YXR1c1RvZ2dsZS5jaGVja2JveCgnaXMgY2hlY2tlZCcpKSB7XG4gICAgICAgICAgICBNb2R1bGVQaG9uZUJvb2tTdGF0dXMuJGZvcm1PYmouc2hvdygpO1xuICAgICAgICAgICAgTW9kdWxlUGhvbmVCb29rU3RhdHVzLiRtb2R1bGVTdGF0dXMuc2hvdygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgTW9kdWxlUGhvbmVCb29rU3RhdHVzLiRmb3JtT2JqLmhpZGUoKTtcbiAgICAgICAgICAgIE1vZHVsZVBob25lQm9va1N0YXR1cy4kbW9kdWxlU3RhdHVzLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH0sXG59O1xuXG4vLyBJbml0aWFsaXplIHRoZSBtb2R1bGUgc3RhdHVzIGhhbmRsZXIgd2hlbiB0aGUgZG9jdW1lbnQgaXMgcmVhZHkuXG4kKGRvY3VtZW50KS5yZWFkeSgoKSA9PiB7XG4gICAgTW9kdWxlUGhvbmVCb29rU3RhdHVzLmluaXRpYWxpemUoKTtcbn0pOyJdfQ==